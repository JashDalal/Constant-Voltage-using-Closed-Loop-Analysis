#include <msp430g2553.h>
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#define UPPERLIMIT 0.7
#define LOWERLIMIT 0.3
//state of buck is changed to ON and Boost  to OFF
#define CCR0val 512
#define Vout 12
#define x 0.01
#define COUNT 500
#define RANGE 1
int flag;
int sensor[2];
float Vin, Vo;
float adc1, adc2;
int count = COUNT;
void ADC_Reading_adc1(void);
void ADC_Reading_adc2(void);
//Vout is the constant voltage to be given to the battery.
//Vo is the output of the converter
//Vin is input from solar panel
//Vin is for Pin 1.0
//Vo is for Pin 1.3
//For Buck Mode, PWM on Pin 2.2 and Pin 2.4 on
//For Boost mode, PWM on Pin 2.4 and 2.2 is off.
//PWM is on Pin 2.2 and Pin 2.4
//Factor for ADC is 2.5/1023 = 0.002443
//Factor for ADC is 52
void readADC(){
    ADC_Reading_adc1();
    ADC_Reading_adc2();
}
void ADC_Config(void){
    ADC10CTL0 = SREF_1 + ADC10ON + ADC10IE + REF2_5V + REFON + + ADC10SHT_2;
}

void ADC_Reading_adc1(void){
    ADC10CTL0 &= ~ENC;
    ADC10CTL1 = INCH_0 + CONSEQ_0;
    ADC10AE0 |= BIT0;
    ADC10CTL0 |= ENC + ADC10SC;
    while(ADC10CTL1 & BUSY);
    adc1 = ADC10MEM;
    Vin = adc1 * 0.002443 * 51;

}

void ADC_Reading_adc2(void){
    ADC10CTL0 &= ~ENC;
    ADC10CTL1 = INCH_3 + CONSEQ_0;
    ADC10AE0 |= BIT3;
    ADC10CTL0 |= ENC + ADC10SC;
    while(ADC10CTL1 & BUSY);
    adc2 = ADC10MEM;
    Vo = adc2 * 0.002443 * 47.4;
    _enable_interrupts();
}

float getduty(float adc){
    float d;

    if(adc < Vout){

        d = 1 - (adc/Vout);
        d = 1 - d;
    }
    else{
        d = Vout/adc;
        d = 1 - d;
    }
    return d;
}



void main(void)
{
  WDTCTL = WDTPW + WDTHOLD; // Stop WDT
  P3SEL = 0x00;
  P3REN = 0X06;
  P3OUT = 0x02;
  P3DIR |= 0x02;
  P3DIR |= 0x01;

  DCOCTL = 0;
  BCSCTL1 = CALBC1_16MHZ;
  DCOCTL = CALDCO_16MHZ;

  P2DIR |= BIT2+BIT4;                       // P2.2 and P2.4 output
  P2SEL |= BIT2+BIT4;                       // P2.4 and P2.2 options select

  ADC_Config();
  readADC();
  TA1CCR0 = CCR0val;                        // PWM Period
  TA1CCTL1 = OUTMOD_7;                      // CCR1 reset/set
  TA1CCTL2 = OUTMOD_7;                      // CCR2 reset/set
  TA1CTL = TASSEL_2 + MC_1;                 // SMCLK, up mode, clear TAR

  float duty = 0;
  duty = getduty(Vin);
  //BUCK
  if(Vin > Vout)
      TA1CCR1 =  duty * CCR0val;       // CCR1 PWM duty cycle
  //BOOST
  if(Vin < Vout)
      TA1CCR2 =  duty * CCR0val;       // CCR2 PWM duty cycle

  for(;;)
  {
           readADC();
           duty = getduty(Vin);

           /*Since we are using inverted duty, we have
            * to reverse the direction of increase and
            * decrease in the dutycycle.
            * Check document Explanation Found on gmail
            */

           //BOOST mode
           if(Vin < Vout){
               while(count != 0) {
                       if(Vo > Vout){
                           duty = duty + x;
                           __delay_cycles(500000);
                       }
                       if(Vo < Vout){
                           duty = duty - x;
                           __delay_cycles(500000);
                       }
                       if(duty > UPPERLIMIT)
                         duty = UPPERLIMIT;
                       if(duty < LOWERLIMIT)
                         duty = LOWERLIMIT;
                       if((Vo >=(Vout - RANGE)) &&  (Vo <=(Vout + RANGE))){
                           duty = getduty(Vin);
                       }
                       TA1CCR1 = 0;
                       TA1CCR2 =  (int)(duty * CCR0val);
                       ADC_Reading_adc2();
                       count--;
                   }

           }

           //BUCK MODE
            if(Vin > Vout){
                while(count != 0) {
                    if(Vo > Vout) {
                       duty = duty + x;
                       __delay_cycles(500000);
                   }
                   if(Vo < Vout) {
                        duty = duty - x;
                        __delay_cycles(500000);
                   }
                   if(duty > UPPERLIMIT)
                           duty = UPPERLIMIT;
                   if(duty < LOWERLIMIT)
                           duty = LOWERLIMIT;
                   if((Vo >=(Vout - RANGE)) &&  (Vo <=(Vout + RANGE))){
                           duty = getduty(Vin);
                   }
                   TA1CCR1 =  (int)(duty * CCR0val); // CCR1 PWM duty cycle
                   TA1CCR2 = CCR0val;
                   ADC_Reading_adc2();
                   count--;
                }
            }
            count = COUNT;
     }
}
#pragma vector = ADC10_VECTOR
 __interrupt void ADC10_ISR(void)
 {
 }
