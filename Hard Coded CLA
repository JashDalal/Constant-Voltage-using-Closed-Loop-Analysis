#include <msp430g2553.h>
#include <stdio.h>
#define CCR0val 512
#define Vout 14
#define x 0.01
int flag;
int sensor[2];
float Vin, Vo;
//adc1 is for Pin 1.1
//adc2 is for Pin 1.0
//PWM is on Pin 2.2 and Pin 2.4
//Factor for ADC is 2.5/1023
//Factor for ADC is 13.75
void readADC() {
    flag = 0;
    if (flag == 0 )
         {
          sensor[0] = 0;
          ADC10CTL0 = SREF_1 + ADC10SHT_2 + REFON + REF2_5V + ADC10ON + ADC10IE;
          ADC10CTL1 = INCH_0;
          ADC10CTL0 |= ENC + ADC10SC;
          sensor[0] = ADC10MEM;
          //adc1 = ((float)sensor[0]/409.2) * 13.75;
          Vin = ((float)sensor[0]/409.2);
          ADC10CTL0 &= ~ENC;
          flag = 1;
        }

        if (flag == 1)
        {
            sensor[1] = 0;
            ADC10CTL0 = SREF_1 + ADC10SHT_2 + REFON + REF2_5V + ADC10ON + ADC10IE;
            ADC10CTL1 = INCH_1;
            ADC10CTL0 |= ENC + ADC10SC;
            sensor[1] = ADC10MEM;
            Vo = (float)sensor[1]/409.2;
            ADC10CTL0 &= ~ENC;
            flag = 0;

          }
}
float getduty(float adc){
    float duty;
    if(adc < 14){
        duty = 1 - (adc/14);
    }
    else
        duty = 14/adc;
    return duty;
}



void main(void)
{
  WDTCTL = WDTPW + WDTHOLD; // Stop WDT
  P3SEL = 0x00;
  P3REN = 0X06;
  P3OUT = 0x02;
  P3DIR |= 0x02;
  P3DIR |= 0x01;

  DCOCTL = 0;
  BCSCTL1 = CALBC1_16MHZ;
  DCOCTL = CALDCO_16MHZ;
  P2DIR |= BIT2+BIT4;                       // P2.2 and P2.4 output
  P2SEL |= BIT2+BIT4;                       // P2.4 and P2.2 options select

  /*DCOCTL = CALDCO_16MHZ;
  BCSCTL1 = CALBC1_16MHZ;
  UCSCTL0 = DCO4 + DCO3 + DCO2 + 0x00FF;   // Set lowest possible DCOx DCO4 + DCO3 + DCO2 + DCO1 + DCO0 +, MODx
    UCSCTL1 = DCORSEL_7 ;                    // Select DCO range 60MHz-135MHz operation
    UCSCTL2 = FLLD_0 + 4119;*/

  readADC();
  TA1CCR0 = CCR0val;                        // PWM Period
  TA1CCTL1 = OUTMOD_7;                      // CCR1 reset/set
  TA1CCR1 =  getduty(Vin) * CCR0val;       // CCR1 PWM duty cycle
  TA1CCTL2 = OUTMOD_7;                      // CCR2 reset/set
  //TA1CCR2 = getduty(adc2) * CCR0val;        // CCR2 PWM duty cycle
  TA1CTL = TASSEL_2 + MC_1;                 // SMCLK, up mode, clear TAR
  //Vo = 8, Vin = 10;
  //float d = getduty(Vin);
  for(;;)
  {
           readADC();
           //Vo += 0.5;
           float d = getduty(Vin);
           if(Vo > Vout) {
               d = d - x;
           }
           if(Vo < Vout) {
               d = d + x;
           }
           TA1CCR1 |=  (int)(d * CCR0val);       // CCR1 PWM duty cycle
       }

  }

  //__bis_SR_register(CPUOFF);             // Enter LPM0
  //__no_operation();                         // For debugger
