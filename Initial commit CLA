#include <msp430.h>
int flag;
int sensor[2];
float adc1, adc2;
#define CCR0val 512
//Factor for ADC is 2.5/1023
//Factor for ADC is 13.75
//Pin 1.0 and 1.1 are used for measuring ADC
//Pin 2.2 and 2.4 are used for PWM
void readADC() {
    flag = 0;
    if (flag == 0 )
         {
          sensor[0] = 0;
          ADC10CTL0 = SREF_1 + ADC10SHT_2 + REFON + REF2_5V + ADC10ON + ADC10IE;
          ADC10CTL1 = INCH_0;
          ADC10CTL0 |= ENC + ADC10SC;
          //__bis_SR_register(CPUOFF + GIE);
          sensor[0] = ADC10MEM;
          adc1 = ((float)sensor[0]/409.2) * 13.75;
          ADC10CTL0 &= ~ENC;
          flag = 1;
        }

        if (flag == 1)
        {
            sensor[1] = 0;
            ADC10CTL0 = SREF_1 + ADC10SHT_2 + REFON + REF2_5V + ADC10ON + ADC10IE;
            ADC10CTL1 = INCH_1;
            ADC10CTL0 |= ENC + ADC10SC;
           // __bis_SR_register(CPUOFF + GIE);
            sensor[1] = ADC10MEM;
            adc2 = (float)sensor[1]/409.2;
            ADC10CTL0 &= ~ENC;
            flag = 0;

          }
}
void main(void)
{
  WDTCTL = WDTPW + WDTHOLD;                 // Stop WDT
  P3SEL = 0x00;
  P3REN = 0X06;
  P3OUT = 0x02;
  P3DIR |= 0x02;
  P3DIR |= 0x01;

  P2DIR |= BIT2 + BIT4;                       // P2.2 and P2.4 output for PWM
  P2SEL |= BIT2 + BIT4;                       // P2.2 and P2.4 options for PWM

  DCOCTL = CALDCO_16MHZ;
  BCSCTL1 = CALBC1_16MHZ;


  TA1CCR0 = CCROval;                        //Freq ~31kHz
  TA1CCTL1 = OUTMOD_7;                      // CCR1 reset/set
  TA1CCR1 = 384;                            // CCR1 PWM duty cycle
  TA1CCTL2 = OUTMOD_7;                      // CCR2 reset/set
  TA1CCR2 = 128;                            // CCR2 PWM duty cycle
  TA1CTL = TASSEL_2 + MC_1 + TACLR;         // SMCLK, up mode, clear TAR
  for(;;)
  {
     readADC(); // Check values of adc1 and adc2.
  }

  __bis_SR_register(LPM0_bits);             // Enter LPM0
  __no_operation();                         // For debugger

}


